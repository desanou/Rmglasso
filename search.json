[{"path":"https://desanou.github.io/mglasso/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 mglasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://desanou.github.io/mglasso/articles/mglasso.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Multiscale GLasso","text":"","code":"remotes::install_github(\"desanou/mglasso\") library(mglasso) library(mglasso) install_conesta()"},{"path":"https://desanou.github.io/mglasso/articles/mglasso.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Multiscale GLasso","text":"Simulate block diagonal model 1.1 True cluster partition 1.2. Simulate gaussian data covariance matrix Launch algorithm Plot results compact version 3.1 Estimated regression vectors level9 denotes partition 9 clusters. observe shrinkage effect estimated coefficients due fuse-group lasso penalty parameter. 3.2 Estimated clustering partitions uncovered partition obtained increasing \\(\\lambda_2\\) hierarchical partition constraints.","code":"library(Matrix) n = 50 K = 3 p = 9 rho = 0.85 blocs <- list()  for (j in 1:K) {   bloc <- matrix(rho, nrow = p/K, ncol = p/K)   for(i in 1:(p/K)) { bloc[i,i] <- 1 }   blocs[[j]] <- bloc }  mat.covariance <- Matrix::bdiag(blocs) Matrix::image(mat.covariance) rep(1:3, each = 3) set.seed(11) X <- mvtnorm::rmvnorm(n, mean = rep(0,p), sigma = as.matrix(mat.covariance)) X <- scale(X)     res <- mglasso(X, lambda1 = 0.1, lambda2_start = 0.1, fuse_thresh = 1e-3) plot_mglasso(res) res$out$level9$clusters res$out$level7$clusters res$out$level4$clusters res$out$level3$clusters res$out$level1$clusters"},{"path":"https://desanou.github.io/mglasso/articles/mglasso.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Multiscale GLasso","text":"Edmond, Sanou; Christophe, Ambroise; Geneviève, Robin; (2022): Inference Multiscale Gaussian Graphical Model. ArXiv. Preprint. https://doi.org/10.48550/arXiv.2202.05775","code":""},{"path":"https://desanou.github.io/mglasso/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edmond Sanou. Author, maintainer. Tung Le. Contributor. Christophe Ambroise. Thesis advisor. Geneviève Robin. Thesis advisor.","code":""},{"path":"https://desanou.github.io/mglasso/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanou E (2022). mglasso: Multiscale Graphical Lasso. R package version 0.1.1, https://desanou.github.io/mglasso/.","code":"@Manual{,   title = {mglasso: Multiscale Graphical Lasso},   author = {Edmond Sanou},   year = {2022},   note = {R package version 0.1.1},   url = {https://desanou.github.io/mglasso/}, }"},{"path":"https://desanou.github.io/mglasso/index.html","id":"method","dir":"","previous_headings":"","what":"Method","title":"Multiscale Graphical Lasso","text":"repository provides implementation MGLasso (Multiscale Graphical Lasso) algorithm: novel approach estimating sparse Gaussian Graphical Models addition group-fused Lasso penalty. MGLasso described paper Inference Multiscale Gaussian Graphical Model. MGLasso three major contributions: simultaneously infer network estimate clustering structure combining neighborhood selection approach (Meinshausen Bühlman, 2006) convex clustering (Hocking et al.2011). use continuation Nesterov smoothing shrinkage-thresholding algorithm (CONESTA, Hadj-Selem et al. 2018) solve optimization problem . show numerically MGLasso performs better GLasso(Meinshausen Bühlman, 2006; Friedman et al. 2007) terms support recovery. clustering performances MGLasso can improved addition weight term calibrate variable fusion regularizer. solve MGLasso problem, seek regression vectors βi minimize $$ J\\_{\\\\lambda_1, \\\\lambda_2}(\\\\boldsymbol{\\\\beta}; \\\\mathbf{X} ) =    \\\\frac{1}{2}       \\\\sum\\_{=1}^p          \\\\left \\\\lVert              \\\\mathbf{X}^- \\\\mathbf{X}^{\\\\setminus } \\\\boldsymbol{\\\\beta}^         \\\\right \\\\rVert_2 ^2  +    \\\\lambda_1      \\\\sum\\_{= 1}^p         \\\\left \\\\lVert           \\\\boldsymbol{\\\\beta}^\\\\right \\\\rVert_1 +    \\\\lambda_2       \\\\sum\\_{\\< j}          \\\\left \\\\lVert             \\\\boldsymbol{\\\\beta}^- \\\\tau\\_{ij}(\\\\boldsymbol{\\\\beta}^j)          \\\\right \\\\rVert_2. $$ MGLasso package available CRAN based python implementation solver CONESTA available pylearn-parsimony library.","code":""},{"path":"https://desanou.github.io/mglasso/index.html","id":"package-requirements","dir":"","previous_headings":"","what":"Package requirements","title":"Multiscale Graphical Lasso","text":"Install reticulate package. Check Python engine available system available Install MGLasso Install MGLasso python dependencies example use given .","code":"install.packages('reticulate') reticulate::py_available() reticulate::install_miniconda() install.packages('mglasso') mglasso::install_conesta()"},{"path":[]},{"path":"https://desanou.github.io/mglasso/index.html","id":"installation","dir":"","previous_headings":"Illustration on a simple model","what":"Installation","title":"Multiscale Graphical Lasso","text":"","code":"remotes::install_github(\"desanou/mglasso\") library(mglasso) library(mglasso) #> Welcome to MGLasso. #> Run install_conesta() to finalize the package python dependencies installation. install_conesta() #> mglasso requires the r-reticulate virtual environment. Attempting to create... #> virtualenv: r-reticulate #> Using virtual environment 'r-reticulate' ... #> Installing pylearn-parsimony #> pylearn-parsimony is installed."},{"path":"https://desanou.github.io/mglasso/index.html","id":"simulate-a-block-diagonal-model","dir":"","previous_headings":"Illustration on a simple model","what":"Simulate a block diagonal model","title":"Multiscale Graphical Lasso","text":"simulate 3-block diagonal model block contains 3 variables. intra-block correlation level set 0.85 correlations outside blocks kept 0.","code":"library(Matrix) n = 50 K = 3 p = 9 rho = 0.85 blocs <- list()  for (j in 1:K) {   bloc <- matrix(rho, nrow = p/K, ncol = p/K)   for(i in 1:(p/K)) { bloc[i,i] <- 1 }   blocs[[j]] <- bloc }  mat.correlation <- Matrix::bdiag(blocs) corrplot::corrplot(as.matrix(mat.correlation), method = \"color\", tl.col=\"black\")"},{"path":"https://desanou.github.io/mglasso/index.html","id":"simulate-gaussian-data-from-the-covariance-matrix","dir":"","previous_headings":"Illustration on a simple model > Simulate a block diagonal model","what":"Simulate gaussian data from the covariance matrix","title":"Multiscale Graphical Lasso","text":"","code":"set.seed(11) X <- mvtnorm::rmvnorm(n, mean = rep(0,p), sigma = as.matrix(mat.correlation)) colnames(X) <- LETTERS[1:9]"},{"path":"https://desanou.github.io/mglasso/index.html","id":"run-mglasso","dir":"","previous_headings":"Illustration on a simple model","what":"Run mglasso()","title":"Multiscale Graphical Lasso","text":"set sparsity level λ1 0.2 rescaled size sample. launch unique run objective function call conesta function.","code":"X <- scale(X)     res <- mglasso(X, lambda1 = 0.2*n, lambda2_start = 0.1, fuse_thresh = 1e-3, verbose = FALSE) temp <- mglasso::conesta(X, lam1 = 0.2*n, lam2 = 0.1)"},{"path":"https://desanou.github.io/mglasso/index.html","id":"estimated-clustering-path","dir":"","previous_headings":"Illustration on a simple model > Run mglasso()","what":"Estimated clustering path","title":"Multiscale Graphical Lasso","text":"plot clustering path mglasso method 2 principal components axis X. path drawn predicted X’s.","code":"library(ggplot2) library(ggrepel) mglasso:::plot_clusterpath(as.matrix(X), res)"},{"path":"https://desanou.github.io/mglasso/index.html","id":"estimated-adjacency-matrices-along-the-clustering-path","dir":"","previous_headings":"Illustration on a simple model > Run mglasso()","what":"Estimated adjacency matrices along the clustering path","title":"Multiscale Graphical Lasso","text":"fusion penalty increases level9 level1 observe progressive fusion adjacent edges.","code":"plot_mglasso(res)"},{"path":"https://desanou.github.io/mglasso/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Multiscale Graphical Lasso","text":"Edmond, Sanou; Christophe, Ambroise; Geneviève, Robin; (2022): Inference Multiscale Gaussian Graphical Model. ArXiv. Preprint. https://doi.org/10.48550/arXiv.2202.05775","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_ols.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize regression matrix — beta_ols","title":"Initialize regression matrix — beta_ols","text":"Initialize regression matrix","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize regression matrix — beta_ols","text":"","code":"beta_ols(X)"},{"path":"https://desanou.github.io/mglasso/reference/beta_ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize regression matrix — beta_ols","text":"X data","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize regression matrix — beta_ols","text":"zero-diagonal matrix regression vectors.","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a matrix of regression coefficients to vector removing the diagonal — beta_to_vector","title":"Transform a matrix of regression coefficients to vector removing the diagonal — beta_to_vector","text":"Transform matrix regression coefficients vector removing diagonal","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a matrix of regression coefficients to vector removing the diagonal — beta_to_vector","text":"","code":"beta_to_vector(beta_mat)"},{"path":"https://desanou.github.io/mglasso/reference/beta_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a matrix of regression coefficients to vector removing the diagonal — beta_to_vector","text":"beta_mat matrix regressions vectors","code":""},{"path":"https://desanou.github.io/mglasso/reference/beta_to_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a matrix of regression coefficients to vector removing the diagonal — beta_to_vector","text":"numeric vector regression coefficients.","code":""},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":null,"dir":"Reference","previous_headings":"","what":"CONESTA solver. — conesta","title":"CONESTA solver. — conesta","text":"Solve MGLasso optimization problem using CONESTA algorithm. Interface pylearn.parsimony python library.","code":""},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CONESTA solver. — conesta","text":"","code":"conesta(   X,   lam1,   lam2,   beta_warm = c(0),   type_ = \"initial\",   W_ = NULL,   mean_ = FALSE,   max_iter_ = 10000,   prec_ = 0.01 )"},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CONESTA solver. — conesta","text":"X Data matrix nxp. lam1 Sparsity penalty. lam2 Total variation penalty. beta_warm Warm initialization vector. type_ Character scalar. default set initial version use weights W_ Weights matrix. mean_ Logical scalar. TRUE weights optimization function inverse sample size. max_iter_ Numeric scalar. Maximum number iterations. prec_ Numeric scalar. Precision.","code":""},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CONESTA solver. — conesta","text":"Numeric matrix size pxp. Line k matrix represents   coefficients obtained L1-L2 penalized regression variable k others.","code":""},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CONESTA solver. — conesta","text":"COntinuation NEsterov smoothing Shrinkage-Thresholding Algorithm (CONESTA, Hadj-Selem et al. 2018) <doi:10.1109/TMI.2018.2829802> algorithm design solving optimization problems including group-wise penalties. function interface python solver. MGLasso problem first reformulated problem form $$argmin 1/2 ||Y - \\tilde{X} \\tilde{\\beta}||_2^2 + \\lambda_1 ||\\tilde{\\beta}||_1 + \\lambda_2 \\sum_{<j} ||\\boldsymbol A_{ij} \\tilde{\\beta}||_2$$ vector \\(Y\\) vectorized form matrix \\(X\\).","code":""},{"path":[]},{"path":"https://desanou.github.io/mglasso/reference/conesta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CONESTA solver. — conesta","text":"","code":"# \\donttest{ install_conesta() #> mglasso requires the r-reticulate virtual environment. Attempting to create... #> Error in system2(python, args, stdout = TRUE, stderr = FALSE): error in running command n = 30 K = 2 p = 4 rho = 0.85 blocs <- list() for (j in 1:K) {   bloc <- matrix(rho, nrow = p/K, ncol = p/K)   for(i in 1:(p/K)) { bloc[i,i] <- 1 }   blocs[[j]] <- bloc }  mat.covariance <- Matrix::bdiag(blocs) mat.covariance #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>                          #> [1,] 1.00 0.85 .    .    #> [2,] 0.85 1.00 .    .    #> [3,] .    .    1.00 0.85 #> [4,] .    .    0.85 1.00 set.seed(11) X <- mvtnorm::rmvnorm(n, mean = rep(0,p), sigma = as.matrix(mat.covariance)) X <- scale(X) res <- conesta(X, 0.1, 0.1) #> Error: $ operator is invalid for atomic vectors # }"},{"path":"https://desanou.github.io/mglasso/reference/cost.html","id":null,"dir":"Reference","previous_headings":"","what":"`Mglasso` cost function — cost","title":"`Mglasso` cost function — cost","text":"`cost` computes cost function `Mglasso` method.","code":""},{"path":"https://desanou.github.io/mglasso/reference/cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"`Mglasso` cost function — cost","text":"","code":"cost(beta, x, lambda1 = 0, lambda2 = 0)"},{"path":"https://desanou.github.io/mglasso/reference/cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"`Mglasso` cost function — cost","text":"beta p p numeric matrix. rows, regression vectors coefficients node-wise regression. diag(beta) = 0. x n p numeric matrix. Data variables columns. lambda1 numeric scalar. Lasso penalization parameter. lambda2 numeric scalar. Fused-group Lasso penalization parameter.","code":""},{"path":"https://desanou.github.io/mglasso/reference/cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"`Mglasso` cost function — cost","text":"numeric scalar. cost.","code":""},{"path":"https://desanou.github.io/mglasso/reference/dist_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distance matrix between regression vectors — dist_beta","title":"Compute distance matrix between regression vectors — dist_beta","text":"Compute distance matrix regression vectors","code":""},{"path":"https://desanou.github.io/mglasso/reference/dist_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distance matrix between regression vectors — dist_beta","text":"","code":"dist_beta(beta, distance = \"euclidean\")"},{"path":"https://desanou.github.io/mglasso/reference/dist_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distance matrix between regression vectors — dist_beta","text":"beta matrix regression vectors distance euclidean relative distance","code":""},{"path":"https://desanou.github.io/mglasso/reference/dist_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distance matrix between regression vectors — dist_beta","text":"numeric matrix distances.","code":""},{"path":"https://desanou.github.io/mglasso/reference/fun_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"weighted sum/difference of two regression vectors — fun_lines","title":"weighted sum/difference of two regression vectors — fun_lines","text":"`fun_lines` applies function `fun` regression vectors reordering coefficients, `j`-th coefficient `beta[j, ]` permuted ``-th coefficient.","code":""},{"path":"https://desanou.github.io/mglasso/reference/fun_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weighted sum/difference of two regression vectors — fun_lines","text":"","code":"fun_lines(i, j, beta, fun = `-`, ni = 1, nj = 1)"},{"path":"https://desanou.github.io/mglasso/reference/fun_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weighted sum/difference of two regression vectors — fun_lines","text":"integer scalar. Index first vector. j integer scalar. Index second vector. beta p p numeric matrix. rows, regression vectors coefficients node-wise regression. `diag(beta) = 0`. fun function. Applied lines. ni integer scalar. Weight vector ``. nj integer scalar. Weight vector `j`.","code":""},{"path":"https://desanou.github.io/mglasso/reference/fun_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weighted sum/difference of two regression vectors — fun_lines","text":"numeric vector","code":""},{"path":"https://desanou.github.io/mglasso/reference/fun_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"weighted sum/difference of two regression vectors — fun_lines","text":"","code":"beta <- matrix(round(rnorm(9),2), ncol = 3) diag(beta) <- 0 beta #>       [,1] [,2] [,3] #> [1,]  0.00 0.71 1.29 #> [2,] -0.64 0.00 0.59 #> [3,]  1.21 1.41 0.00 fun_lines(1, 2, beta) #> [1] 0.00 1.35 0.70 fun_lines(2, 1, beta) #> [1] -1.35  0.00 -0.70"},{"path":"https://desanou.github.io/mglasso/reference/image_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the image of a matrix — image_sparse","title":"Plot the image of a matrix — image_sparse","text":"Plot image matrix","code":""},{"path":"https://desanou.github.io/mglasso/reference/image_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the image of a matrix — image_sparse","text":"","code":"image_sparse(matrix, main_ = \"\", sub_ = \"\", col_names = FALSE)"},{"path":"https://desanou.github.io/mglasso/reference/image_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the image of a matrix — image_sparse","text":"matrix matrix regression coefficients main_ title sub_ subtitle col_names columns names","code":""},{"path":"https://desanou.github.io/mglasso/reference/image_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the image of a matrix — image_sparse","text":"return value.","code":""},{"path":"https://desanou.github.io/mglasso/reference/install_conesta.html","id":null,"dir":"Reference","previous_headings":"","what":"Install CONESTA solver — install_conesta","title":"Install CONESTA solver — install_conesta","text":"Install CONESTA solver","code":""},{"path":"https://desanou.github.io/mglasso/reference/install_conesta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install CONESTA solver — install_conesta","text":"","code":"install_conesta(   extra_pack = c(\"scipy == 1.7.1\", \"scikit-learn\", \"numpy\", \"six\", \"matplotlib\"),   py_version = \"3.8.0\" )"},{"path":"https://desanou.github.io/mglasso/reference/install_conesta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install CONESTA solver — install_conesta","text":"extra_pack Character vector. Extra-packages installed. py_version Character. Python version.","code":""},{"path":"https://desanou.github.io/mglasso/reference/install_conesta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install CONESTA solver — install_conesta","text":"return value.","code":""},{"path":"https://desanou.github.io/mglasso/reference/merge_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"compute clusters partition from pairs of variables to merge — merge_clusters","title":"compute clusters partition from pairs of variables to merge — merge_clusters","text":"compute clusters partition pairs variables merge","code":""},{"path":"https://desanou.github.io/mglasso/reference/merge_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute clusters partition from pairs of variables to merge — merge_clusters","text":"","code":"merge_clusters(pairs_to_merge, clusters)"},{"path":"https://desanou.github.io/mglasso/reference/merge_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute clusters partition from pairs of variables to merge — merge_clusters","text":"pairs_to_merge table indices variables merge clusters numeric vector. default 1:p p number variables","code":""},{"path":"https://desanou.github.io/mglasso/reference/merge_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute clusters partition from pairs of variables to merge — merge_clusters","text":"numeric vector.","code":""},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference of Multiscale Gaussian Graphical Model. — mglasso","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"Cluster variables using L2 fusion penalty simultaneously estimates gaussian graphical model structure addition L1 sparsity penalty.","code":""},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"","code":"mglasso(   x,   lambda1 = 0,   fuse_thresh = 0.001,   maxit = NULL,   distance = c(\"euclidean\", \"relative\"),   lambda2_start = 1e-04,   lambda2_factor = 1.5,   precision = 0.01,   weights_ = NULL,   type = c(\"initial\"),   compact = TRUE )"},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"x Numeric matrix (\\(n x p\\)). Multivariate normal sample \\(n\\) independent observations. lambda1 Positive numeric scalar. Lasso penalty. fuse_thresh Positive numeric scalar. Threshold clusters fusion. maxit Integer scalar. Maximum number iterations. distance Character. Distance regression vectors permutation symmetric coefficients. lambda2_start Numeric scalar. Starting value fused-group Lasso penalty (clustering penalty). lambda2_factor Numeric scalar. Step used update fused-group Lasso penalty multiplicative way.. precision Precision estimation algorithm. weights_ Matrix weights. type \"initial\" use classical version MGLasso without weights. compact Logical scalar. TRUE, save results previous clusters different current.","code":""},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"list-like object class mglasso returned. List lists. element list corresponds   clustering level. element named levelk contains regression   matrix beta clusters vector clusters clustering   k clusters. compact = TRUE many   elements number unique partitions. set FALSE,   function returns many items range values taken   lambda2. l1 sparsity penalty lambda1 used   problem solving.","code":""},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"Estimates gaussian graphical model structure hierarchically grouping variables optimizing pseudo-likelihood function combining Lasso fuse-group Lasso penalties. problem solved via COntinuation NEsterov smoothing Shrinkage-Thresholding Algorithm (Hadj-Selem et al. 2018). Varying fusion penalty \\(\\lambda_2\\) multiplicative fashion allow uncover seemingly hierarchical clustering structure. \\(\\lambda_2 = 0\\), approach theoretically equivalent Meinshausen-Bühlmann (2006) neighborhood selection resuming optimization pseudo-likelihood function \\(\\ell_1\\) penalty (Rocha et al., 2008). algorithm stops variables merged one cluster. criterion used merge clusters \\(\\ell_2\\)-norm distance regression vectors. iteration algorithm, following function optimized : $$1/2 \\sum_{=1}^p || X^- X^{\\ } \\beta^||_2 ^2  + \\lambda_1 \\sum_{= 1}^p || \\beta^||_1 + \\lambda_2 \\sum_{< j} || \\beta^- \\tau_{ij}(\\beta^j) ||_2.$$ \\(\\beta^\\) vector coefficients obtained regression \\(X^\\) others \\(\\tau_{ij}\\) permutation exchanging \\(\\beta_j^\\) \\(\\beta_i^j\\).","code":""},{"path":[]},{"path":"https://desanou.github.io/mglasso/reference/mglasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference of Multiscale Gaussian Graphical Model. — mglasso","text":"","code":"# \\donttest{ install_conesta #> function (extra_pack = c(\"scipy == 1.7.1\", \"scikit-learn\", \"numpy\",  #>     \"six\", \"matplotlib\"), py_version = \"3.8.0\")  #> { #>     is_rreticulate_env_installed = tryCatch(reticulate::use_virtualenv(envname = \"r-reticulate\",  #>         required = TRUE), error = function(e) { #>         \"not installed\" #>     }) #>     if (!is.null(is_rreticulate_env_installed)) { #>         packageStartupMessage(\"mglasso requires the r-reticulate virtual environment. Attempting to create...\") #>         reticulate::virtualenv_create(envname = \"r-reticulate\",  #>             python = py_version) #>     } #>     reticulate::use_virtualenv(virtualenv = \"r-reticulate\", required = TRUE) #>     check_install <- sapply(extra_pack, reticulate::py_module_available) #>     pack_to_install <- extra_pack[!check_install] #>     if (!identical(pack_to_install, character(0))) { #>         reticulate::py_install(pack_to_install, pip = TRUE, envname = \"r-reticulate\") #>     } #>     if (!reticulate::py_module_available(\"pylearn-parsimony\")) { #>         reticulate::use_virtualenv(virtualenv = \"r-reticulate\",  #>             required = TRUE) #>         message(\"Installing pylearn-parsimony\") #>         text <- \"pip install git+git://github.com/neurospin/pylearn-parsimony.git@master --quiet\" #>         system(text) #>     } #>     message(\"pylearn-parsimony is installed.\") #> } #> <bytecode: 0x559b085a70a8> #> <environment: namespace:mglasso> n = 50 K = 3 p = 9 rho = 0.85 blocs <- list() for (j in 1:K) {   bloc <- matrix(rho, nrow = p/K, ncol = p/K)   for(i in 1:(p/K)) { bloc[i,i] <- 1 }   blocs[[j]] <- bloc }  mat.covariance <- Matrix::bdiag(blocs) mat.covariance #> 9 x 9 sparse Matrix of class \"dgCMatrix\" #>                                                    #>  [1,] 1.00 0.85 0.85 .    .    .    .    .    .    #>  [2,] 0.85 1.00 0.85 .    .    .    .    .    .    #>  [3,] 0.85 0.85 1.00 .    .    .    .    .    .    #>  [4,] .    .    .    1.00 0.85 0.85 .    .    .    #>  [5,] .    .    .    0.85 1.00 0.85 .    .    .    #>  [6,] .    .    .    0.85 0.85 1.00 .    .    .    #>  [7,] .    .    .    .    .    .    1.00 0.85 0.85 #>  [8,] .    .    .    .    .    .    0.85 1.00 0.85 #>  [9,] .    .    .    .    .    .    0.85 0.85 1.00  set.seed(11) X <- mvtnorm::rmvnorm(n, mean = rep(0,p), sigma = as.matrix(mat.covariance)) X <- scale(X)  res <- mglasso(X, 0.1, lambda2_start = 0.1) #> Error: $ operator is invalid for atomic vectors res$out[[1]]$clusters #> Error in eval(expr, envir, enclos): object 'res' not found res$out[[1]]$beta #> Error in eval(expr, envir, enclos): object 'res' not found # }"},{"path":"https://desanou.github.io/mglasso/reference/plot_mglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mglasso function output. — plot_mglasso","title":"Plot mglasso function output. — plot_mglasso","text":"Plot object returned mglasso function.","code":""},{"path":"https://desanou.github.io/mglasso/reference/plot_mglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mglasso function output. — plot_mglasso","text":"","code":"plot_mglasso(mglasso_, levels_ = NULL)"},{"path":"https://desanou.github.io/mglasso/reference/plot_mglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mglasso function output. — plot_mglasso","text":"mglasso_ Object class mglasso. levels_ Character vector. Selected levels estimated matrices plot. NULL plot levels.","code":""},{"path":"https://desanou.github.io/mglasso/reference/plot_mglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mglasso function output. — plot_mglasso","text":"return value.","code":""},{"path":"https://desanou.github.io/mglasso/reference/precision_to_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute precision matrix from regression vectors — precision_to_regression","title":"Compute precision matrix from regression vectors — precision_to_regression","text":"Compute precision matrix regression vectors","code":""},{"path":"https://desanou.github.io/mglasso/reference/precision_to_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute precision matrix from regression vectors — precision_to_regression","text":"","code":"precision_to_regression(K)"},{"path":"https://desanou.github.io/mglasso/reference/precision_to_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute precision matrix from regression vectors — precision_to_regression","text":"K precision matrix","code":""},{"path":"https://desanou.github.io/mglasso/reference/precision_to_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute precision matrix from regression vectors — precision_to_regression","text":"numeric matrix.","code":""},{"path":"https://desanou.github.io/mglasso/reference/symmetrize.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply symmetrization on estimated graph — symmetrize","title":"Apply symmetrization on estimated graph — symmetrize","text":"Apply symmetrization estimated graph","code":""},{"path":"https://desanou.github.io/mglasso/reference/symmetrize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply symmetrization on estimated graph — symmetrize","text":"","code":"symmetrize(mat, rule = \"and\")"},{"path":"https://desanou.github.io/mglasso/reference/symmetrize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply symmetrization on estimated graph — symmetrize","text":"mat graph precision matrix rule \"\" \"\" rule","code":""},{"path":"https://desanou.github.io/mglasso/reference/symmetrize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply symmetrization on estimated graph — symmetrize","text":"numeric matrix.","code":""}]
