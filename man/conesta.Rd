% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conesta.R
\name{conesta}
\alias{conesta}
\title{CONESTA solver.}
\usage{
conesta(...)
}
\arguments{
\item{X}{Data matrix.}

\item{lam1}{Sparsity penalty.}

\item{lam2}{Total variation penalty.}

\item{beta_warm}{Warm initialization vector.}

\item{type_}{Character scalar. By default set to initial version which don't
use weights}

\item{W_}{Weights matrix.}

\item{mean_}{Logical scalar. If TRUE weights the optimization function by the
inverse of sample size.}

\item{max_iter_}{Numeric scalar. Maximum number of iterations.}

\item{prec_}{Numeric scalar. Precision.}
}
\value{
Matrix of regression coefficients.
}
\description{
Solve the MGLasso optimization problem using CONESTA algorithm. Interface to
the pylearn.parsimony python library.
}
\details{
COntinuation with NEsterov smoothing in a Shrinkage-Thresholding Algorithm
(CONESTA, Hadj-selem et al. 2018) is an algorithm design for solving
optimization problems including group-wise penalties. This function is a
wrapper for the python code calling the optimization function.
}
\examples{
\dontrun{
n = 30
K = 2
p = 4
rho = 0.85
blocs <- list()
for (j in 1:K) {
  bloc <- matrix(rho, nrow = p/K, ncol = p/K)
  for(i in 1:(p/K)) { bloc[i,i] <- 1 }
  blocs[[j]] <- bloc
}

mat.covariance <- Matrix::bdiag(blocs)
mat.covariance
set.seed(11)
X <- mvtnorm::rmvnorm(n, mean = rep(0,p), sigma = as.matrix(mat.covariance))
X <- scale(X)
res <- conesta(X, 0.1, 0.1)
}

}
\seealso{
\code{\link{mglasso}} for the MGLasso model estimation.
}
